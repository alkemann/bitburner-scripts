/** @param {NS} ns **/
const treeRoot = `https://api.github.com/repos/alkemann/bitburner-scripts/git/trees/HEAD`

export async function main(ns) {
	let currentSha;
	let treeFile;
	if(ns.fileExists("tree.txt")) {
		treeFile = JSON.parse(ns.read('tree.txt'));
		currentSha = treeFile.sha;
		ns.run('/scripts/hub.ns');
	} else {
		currentSha = "";
	}

    while (true) {
		if (await ns.wget(treeRoot,'tree.txt')) {
			treeFile = JSON.parse(ns.read('tree.txt'));
			if(treeFile.sha != currentSha) {
				currentSha = treeFile.sha;
				ns.print(`INFO: Downloading scripts at ${currentSha}`)
				const urls = await getUrls(ns, treeFile.tree);
				const processes = ns.ps();

				processes.forEach((script) => {
					if(script.filename != ns.getScriptName()) {
						ns.scriptKill(script.filename, ns.getHostname());
					}
				});

				for (let url of urls) {
					const status = await ns.wget(url[1],`/${url[0]}`);
					if(status) {
						ns.print(`SUCCESS: Downloaded ${url[0]}`);
					} else {
						ns.print(`ERROR: Failed to download ${url[0]} from ${url[1]}`);
					}
				}

				ns.run('/scripts/updater.ns');
				return;
			}
		}
		await ns.sleep(10000);
	}
}

async function getUrls(ns, tree, dir = "") {
	let urls = []

	for(let node of tree) {
		const fullPath = (dir.length > 0) ? `${dir}/${node.path}` : `${node.path}`

		if (node.type == "tree") {
			const status = await ns.wget(node.url, 'tmp.txt');
			if (status) {
				const newTree = JSON.parse(ns.read('tmp.txt'));
				urls = urls.concat(await getUrls(ns, newTree["tree"], fullPath));
			} else {
				ns.print(`ERROR: Could not fetch ${node.url}`);
			}
		} else if (node["type"] == "blob" && fullPath.includes(".ns")) {
			urls.push([fullPath, `https://raw.githubusercontent.com/${repo}/master/${fullPath}`])
		}
	}

	return urls;
}
